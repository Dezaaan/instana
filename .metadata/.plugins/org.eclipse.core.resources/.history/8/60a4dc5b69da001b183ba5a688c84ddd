package representation;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import addressbook.domain.Contact;
import io.dropwizard.jackson.Jackson;

public class ContactTest {
	 private static final ObjectMapper MAPPER = Jackson.newObjectMapper();

	    @Test
	    public void serializesToJSON() throws Exception {
	        final Contact contact = new Contact("id", "name", "firstName", "address", new ArrayList<String>(), "homePage", new Date(), "note");
	        
	        JSONParser parser = new JSONParser();
			try {
				Object obj = parser.parse(new FileReader("/src/test/java/resources/fixtures/contact.json"));
	 
				// A JSON object. Key value pairs are unordered. JSONObject supports java.util.Map interface.
				JSONObject jsonObject = (JSONObject) obj;
	 
				// A JSON array. JSONObject supports java.util.List interface.
				JSONArray companyList = (JSONArray) jsonObject.get("Company List");
	 
				// An iterator over a collection. Iterator takes the place of Enumeration in the Java Collections Framework.
				// Iterators differ from enumerations in two ways:
				// 1. Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.
				// 2. Method names have been improved.
				Iterator<JSONObject> iterator = companyList.iterator();
				while (iterator.hasNext()) {
					System.out.println(iterator.next());
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

	        Assert.assertEquals(MAPPER.writeValueAsString(contact), expected);
	    }

}
