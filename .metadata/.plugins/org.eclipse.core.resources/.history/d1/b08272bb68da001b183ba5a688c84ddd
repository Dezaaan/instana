package representation;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import addressbook.domain.Contact;
import io.dropwizard.jackson.Jackson;

public class ContactTest {
	 private static final ObjectMapper MAPPER = Jackson.newObjectMapper();

	    @Test
	    public void serializesToJSON() throws Exception {
	        final Contact contact = new Contact("id", "name", "firstName", "address", new ArrayList<String>(), "homePage", new Date(), "note");
	        
	        JSONParser jsonParser = new JSONParser();
	        
	        try (FileReader reader = new FileReader("employees.json"))
	        {
	            //Read JSON file
	            Object obj = jsonParser.parse(reader);
	 
	            JSONArray employeeList = (JSONArray) obj;
	            System.out.println(employeeList);
	             
	            //Iterate over employee array
//	            employeeList.forEach( emp -> parseEmployeeObject( (JSONObject) emp ) );
	            for (Object emp : employeeList) {
					emp = parseEmployeeObject(emp)
				}
	 
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        } catch (ParseException e) {
	            e.printStackTrace();
	        }
	        
	        final String expected = MAPPER.writeValueAsString(
	                MAPPER.readValue(fixture("fixtures/person.json"), Contact.class));

	        Assert.assertEquals(MAPPER.writeValueAsString(contact), expected);
	    }

}
