package resources;

import static org.junit.Assert.*;
//import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.Optional;
import java.util.concurrent.ExecutionException;

import org.junit.Assert;
import org.junit.function.ThrowingRunnable;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import addressbook.domain.Contact;
import addressbook.resource.ContactResource;
import addressbook.service.FirebaseService;
import addressbook.serviceI.FirebaseServiceI;
import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
import io.dropwizard.testing.junit5.ResourceExtension;

@ExtendWith(DropwizardExtensionsSupport.class)
public class ContactResourceTestTest {

	private static final FirebaseServiceI firebaseService = mock(FirebaseService.class);
	private static final ResourceExtension contactResource = ResourceExtension.builder()
			.addResource(new ContactResource(firebaseService)).build();
	private Contact contact;
//	private List<Contact> contacts;

	@BeforeEach
	void setup() {
		contact = new Contact("id", "name", "firstName", "address", new ArrayList<String>(), "homePage", new Date(),
				"note");
//		contact.setId("id");
	}

	@Test
	void getContactById_Success() throws InterruptedException, ExecutionException {
		when(firebaseService.getContactById("id")).thenReturn(contact);
		Contact found = contactResource.target("/contact/id").request().get(Contact.class);	
		Assert.assertEquals(contact.getId(), found.getId());
		verify(firebaseService).getContactById("id");
	}
	
	@Test
	void addContact_Success() throws InterruptedException, ExecutionException {
//		Contact testContact = new Contact("id", "name", "firstName", "address", new ArrayList<String>(), "homePage", new Date(),
//				"note");
//		when(firebaseService.addContact(contact)).thenReturn(testContact);
//		Contact found = contactResource.target("/contact/id").request().get(Contact.class);	
//		Assert.assertEquals(contact.getId(), found.getId());
//		verify(firebaseService).getContactById("id");
	}
	
	@Test
	void deleteContact_Success() throws InterruptedException, ExecutionException {
//		Contact testContact = new Contact("id", "name", "firstName", "address", new ArrayList<String>(), "homePage", new Date(),
//				"note");
		String id = "id";
		when(firebaseService.deleteContact(contact.getId())).thenReturn(id);
		contactResource.target("/delete/" + id).request().get(Contact.class);	
		Assert.assertEquals(contact.getId(), id);
//		verify(firebaseService).getContactById("id");
	}
	
//	@Test
	void getContactById_InterruptedException()  {
//		when(firebaseService.getContactById("id")).thenThrow(InterruptedException.class);
		
		InterruptedException exception = Assert.assertThrows(InterruptedException.class, new ThrowingRunnable() {
			public void run() throws Throwable {
				when(firebaseService.getContactById("dd")).thenThrow(InterruptedException.class);
				Contact found = contactResource.target("/contact/dd").request().get(Contact.class);
//				throw new InterruptedException();
			}
		});

//		Contact found = contactResource.target("/contact/dd").request().get(Contact.class);
//	    System.out.println("ddd");
//		String expectedMessage = "For input string";
//	    String actualMessage = exception.getMessage();
	    System.out.println("EXCEPTION" + exception);
//		Assert.assertEquals(exception, InterruptedException);
//		verify(firebaseService).getContactById("id");
	}

}
